import turtle 




# Set up the screen
wn = turtle.Screen()   # import the screen itself
wn.bgcolor('black') 	# set the background colour of the screen
wn.title('Space Invaders') 	# set the title for the screen 

### currenty with only these 3 lines the screen goes after the script has finihsed, so we add ad elay to keep it 

# Create a border
border_pen = turtle.Turtle() # creates a border/pen to hold the game inside, we will now give it some properties
border_pen.speed(0) 	#fastest speed for drawing border
border_pen.color('white')
border_pen.penup() 	# starts the pen that draws the order at bottom left
border_pen.setposition(-300,-300)  # for 600 x 600 centred at 0,0
border_pen.pensize(3) 	# give line some thickness
border_pen.pendown()
for side in range(4):
	border_pen.fd(600)
	border_pen.lt(90)
border_pen.hideturtle()




# Create player turtle
player = turtle.Turtle()
player.color('blue')
player.shape('triangle')
player.penup()
player.speed(0) 
player.setposition(0,-250)
player.setheading(90) 	# rotates to point upwards 


# Setup the players movement
playerspeed = 15

# Create players bullet
bullet = turtle.Turtle()
bullet.color('yellow')
bullet.shape('triangle')
bullet.penup()
bullet.speed(0)
bullet.setheading(90)
bullet.shapesize(0.5,0.5)
bullet.hideturtle() 	#hide until gets fired

bulletspeed = 20

# Define bullet state
# ready - ready to fire
# fire - bullet is firing
bulletstate = 'ready'


# Create an enermy
enemy = turtle.Turtle()
enemy.color('red')
enemy.shape('circle')
enemy.penup()   #draw it but then stop drawing, so stop tracing path
enemy.speed(0) #max
enemy.setposition(-200,250)

enemyspeed = 2

def move_left():  
	'''define how the player moves left'''
	x =  player.xcor()   #establish the current position of the player
	x -= playerspeed  #change by incremental amoumt
	if x < -280:  #set bouindary condition to keep it in the screen
		x = -280
	player.setx(x)  	#set the new x cord of the player to the variable x we just made


def move_right():  
	'''define how the player moves left'''
	x =  player.xcor()   #establish the current position of the player
	x += playerspeed  #change by incremental amount
	if x > 280:  #set bouindary condition to keep it in the screen
		x = 280
	player.setx(x)  	#set the new x cord of the player to the variable x we just made

def fire_bullet():
	# declare bullet state as a global variable if it needs to be changed
	global bulletstate # no longer just a variable in the function
	if bulletstate == 'ready':
		bulletstate = 'fire'
		# Move the bullet to just above the player
		x = player.xcor()
		y = player.ycor()
		bullet.setposition(x,y + 10)
		bullet.showturtle()




# Create keyboard bindings
turtle.listen()
turtle.onkey(move_left, 'Left')   #when i press left, it moves left
turtle.onkey(move_right, 'Right')   #when i press right, it moves left
turtle.onkey(fire_bullet, 'space')

# Create main game loop

while True:     #basically means forever

	#move the enemy
	x = enemy.xcor()
	x += enemyspeed
	enemy.setx(x)

	# Move back across screen
	if enemy.xcor() > 280:
		y = enemy.ycor()
		y -= 40
		enemy.sety(y)
		enemyspeed *= -1

	if enemy.xcor() < -280:
		y = enemy.ycor()
		y -= 40
		enemy.sety(y)
		enemyspeed *= -1

	# Move bullet
	if bulletstate == 'fire':
		y = bullet.ycor()
		y += bulletspeed
		bullet.sety(y)

	# Chck bullet is in the field
	if bullet.ycor() > 275:
		bullet.hideturtle()
		bulletstate = 'ready'


