import turtle 
import numpy as np
import random
import winsound


# Set up the screen
wn = turtle.Screen()   # import the screen itself
wn.bgcolor('black') 	# set the background colour of the screen
wn.title('Space Invaders') 	# set the title for the screen 
wn.bgpic('space_invaders_background.gif')

# Register the shapes for player and alien
turtle.register_shape('invader.gif')
turtle.register_shape('player.gif')
# Create a border
border_pen = turtle.Turtle() # creates a border/pen to hold the game inside, we will now give it some properties
border_pen.speed(0) 	#fastest speed for drawing border
border_pen.color('white')
border_pen.penup() 	# starts the pen that draws the order at bottom left
border_pen.setposition(-300,-300)  # for 600 x 600 centred at 0,0
border_pen.pensize(3) 	# give line some thickness
border_pen.pendown()
for side in range(4):
	border_pen.fd(600)
	border_pen.lt(90)
border_pen.hideturtle()

# Set the score = 0
score = 0

# Darw the score
score_pen = turtle.Turtle()
score_pen.speed(0)
score_pen.color('white')
score_pen.penup()
score_pen.setposition(-290,280)
scorestring = 'Score: %s' %score
score_pen.write(scorestring, False, align = 'left', font = ('Arial',14, 'normal'))
score_pen.hideturtle()


# Create player turtle
player = turtle.Turtle()
player.color('blue')
player.shape('player.gif')
player.penup()
player.speed(0) 
player.setposition(0,-250)
player.setheading(90) 	# rotates to point upwards 


## Setup the players movement
playerspeed = 10

# Create players bullet
bullet = turtle.Turtle()
bullet.color('yellow')
bullet.shape('triangle')
bullet.penup()
bullet.speed(0)
bullet.setheading(90)
bullet.shapesize(0.5,0.5)
bullet.hideturtle() 	#hide until gets fired

bulletspeed = 20

## Define bullet state
# ready - ready to fire
# fire - bullet is firing
bulletstate = 'ready'

## Create bollards that take 5 bullets to destroy

number_of_bollards = 6
bollards =[]

for i in range(number_of_bollards):
	bollards.append(turtle.Turtle())

for bollard in bollards:

	bollard = turtle.Turtle()
	bollard.speed(0)
	bollard.color('yellow')
	bollard.shape('square')
	bollard.penup()
	bollard.setposition(-250 + 50*random.randint(1,5),-150)


# Choose number of enemies
number_of_enemies = 5
# Create empty list of enemies
enemies = []

# Add enemies to list
for i in range(number_of_enemies):
	enemies.append(turtle.Turtle())

# Give enemies feautres 
for enemy in enemies:
	enemy.color('red')
	enemy.shape('invader.gif')
	enemy.penup()   #draw it but then stop drawing, so stop tracing path
	enemy.speed(0) # max
	x = random.randint(-200,200)
	y = random.randint(100,250)
	enemy.setposition(x,y)  

enemyspeed = 2
def move_left():  
	'''define how the player moves left'''
	x =  player.xcor()   #establish the current position of the player
	x -= playerspeed  #change by incremental amoumt
	if x < -280:  #set bouindary condition to keep it in the screen
		x = -280
	player.setx(x)  	#set the new x cord of the player to the variable x we just made


def move_right():  
	'''define how the player moves left'''
	x =  player.xcor()   #establish the current position of the player
	x += playerspeed  #change by incremental amount
	if x > 280:  #set bouindary condition to keep it in the screen
		x = 280
	player.setx(x)  	#set the new x cord of the player to the variable x we just made

def fire_bullet():
	''' declare bullet state as a global variable if it needs to be changed'''
	global bulletstate # no longer just a variable in the function
	if bulletstate == 'ready':
		winsound.PlaySound('laser',winsound.SND_ASYNC)
		bulletstate = 'fire'
		# Move the bullet to just above the player
		x = player.xcor()
		y = player.ycor()
		bullet.setposition(x,y + 10)
		bullet.showturtle()
		

def isCollision(t1,t2):    #do turtle 1 and turle 2 collide
	'''check for collision between 2 turtles'''
	distance = np.sqrt( (t1.xcor() - t2.xcor() )**2 + (t1.ycor() - t2.ycor() )**2)
	if distance < 15:
		return True

	else:
		return False


# Create keyboard bindings
turtle.listen()
turtle.onkey(move_left, 'Left')   #when i press left, it moves left
turtle.onkey(move_right, 'Right')   #when i press right, it moves left
turtle.onkey(fire_bullet, 'space')

# Create main game loop

while True:     #basically means forever
	for enemy in enemies:
		#move the enemy
		x = enemy.xcor()
		x += enemyspeed
		enemy.setx(x)

		# Move back across screen and down
		if enemy.xcor() > 280:
			for e in enemies: #move all the players down when one its the edge
				# need e now becasue enemy has been used
				y = e.ycor()
				y -= 40
				e.sety(y)
			enemyspeed *= -1

		if enemy.xcor() < -280:
			for e in enemies:
				y = e.ycor()
				y -= 40
				e.sety(y)
			enemyspeed *= -1

		# Check for colliion between bullet and enemy
		if isCollision(bullet,enemy):
			#make noise
			winsound.PlaySound('explosion',winsound.SND_ASYNC)
			# reset bullet
			bullet.hideturtle()
			bulletstate = 'ready'
			bullet.setposition(0,-400) # to make sure it doesnt collisde even when hidden 
			# Reset the enemy randomly
			x = random.randint(-200,200)
			y = random.randint(100,250)
			enemy.setposition(x,y) 
			# Update score
			score +=10 
			scorestring = 'Score: %s' %score
			score_pen.clear() #else 10 get written on top on 0
			score_pen.write(scorestring, False, align = 'left', font = ('Arial',14, 'normal'))


		if isCollision(bullet,bollard):
			#make noise
			winsound.PlaySound('explosion',winsound.SND_ASYNC)
			# reset bullet
			bullet.hideturtle()
			bulletstate = 'ready'
			bullet.setposition(0,-400) # to make sure it doesnt collisde even when hidden 
			bollard.hideturtle()
			bollard.setposition(0,400)


		if isCollision(player,enemy):
			player.hideturtle()
			enemy.hideturtle()
			print(' Game Over')
			break 

	# Move bullet
	if bulletstate == 'fire':
		y = bullet.ycor()
		y += bulletspeed
		bullet.sety(y)

	# Check bullet is in the field
	if bullet.ycor() > 275:
		bullet.hideturtle()
		bulletstate = 'ready'

	


delay = input('Press enter to finish')

